-- MySQL Script generated by MySQL Workbench
-- dim. 06 déc. 2020 10:10:47
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward EngineMessages non lus

Tous

Mentions

Fils de discussion

Réactions

Applications

Fil de discussion dans promo-elizabeth-feinler-paris
21 mins

Clara
a répondu à :
Hello les @elizabethfeinler-paris,…
Le workshop aura lieu en visio!

Zoé
 et plusieurs autres personnes ont réagi dans promo-elizabeth-feinler-paris
50 mins
yeux
Nicolas
Hello Clara, est-ce que l'intervention pour rétablir le Wi-Fi a pu avoir lieu ?  Pour savoir si tout sera ok demain :visage_légèrement_souriant: Merci !
:yeux:
5
:pensif:
2


Ryo
 a réagi à votre message
12 h 09
coche_blanche
Nicolas
on se fait un appel en début d'après midi si tu veux ? que l'on voit où on en est, et que tu me racontes ton test qui n'a pas fonctionné hier :clin_d'œil:
:coche_blanche:
1


Aurélien
 a réagi à votre message
9 h 51
rire
Nicolas
les andouillettes se sont bien amusées alors :sourire:
:rire:
1

Fil de discussion dans promo-elizabeth-feinler-paris
9 h 09

Clara
a répondu à :
Hello les @elizabethfeinler-paris…
Masterclass Ada - Paris - Elizabeths - Matthieu H. (Underscore_)…
Fil de discussion dans promo-elizabeth-feinler-bleu
Hier

Assitan Koné
a répondu à :
@elizabeth-feinler-paris-bleu en remote, n'hésitez pas à me solliciter si vous avez des questions, difficultés
Envoie un message à Stephane :visage_légèrement_souriant:
Mention dans promo-elizabeth-feinler-paris
Hier

Clara
Hello les @elizabethfeinler-paris…

Ryo
 a réagi à votre message
Hier
+1::couleur-de-peau-2
Nicolas
oui, on s'en reparle tout à l'heure
:+1::couleur-de-peau-2:
1


Ryo
 a réagi à votre message
Hier
+1
Nicolas
tout à fait !
:+1:
1


Fil de discussion
promo-elizabeth-feinler-paris


ering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema socialnetwork
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema socialnetwork
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `socialnetwork` ;
USE `socialnetwork` ;

-- -----------------------------------------------------
-- Table `socialnetwork`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `socialnetwork`.`users` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `alias` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `alias_UNIQUE` (`alias` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `socialnetwork`.`posts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `socialnetwork`.`posts` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `content` TEXT NOT NULL,
  `created` DATETIME NOT NULL,
  `parent_id` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_posts_users_idx` (`user_id` ASC),
  INDEX `fk_posts_posts1_idx` (`parent_id` ASC),
  CONSTRAINT `fk_posts_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `socialnetwork`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_posts_posts1`
    FOREIGN KEY (`parent_id`)
    REFERENCES `socialnetwork`.`posts` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `socialnetwork`.`tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `socialnetwork`.`tags` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `label` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `label_UNIQUE` (`label` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `socialnetwork`.`posts_tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `socialnetwork`.`posts_tags` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `post_id` INT UNSIGNED NOT NULL,
  `tag_id` INT UNSIGNED NOT NULL,
  INDEX `fk_posts_has_tags_tags1_idx` (`tag_id` ASC),
  INDEX `fk_posts_has_tags_posts1_idx` (`post_id` ASC),
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_posts_has_tags_posts1`
    FOREIGN KEY (`post_id`)
    REFERENCES `socialnetwork`.`posts` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_posts_has_tags_tags1`
    FOREIGN KEY (`tag_id`)
    REFERENCES `socialnetwork`.`tags` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `socialnetwork`.`followers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `socialnetwork`.`followers` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `followed_user_id` INT UNSIGNED NOT NULL,
  `following_user_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_users_has_users_users2_idx` (`following_user_id` ASC),
  INDEX `fk_users_has_users_users1_idx` (`followed_user_id` ASC),
  CONSTRAINT `fk_users_has_users_users1`
    FOREIGN KEY (`followed_user_id`)
    REFERENCES `socialnetwork`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_has_users_users2`
    FOREIGN KEY (`following_user_id`)
    REFERENCES `socialnetwork`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `socialnetwork`.`likes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `socialnetwork`.`likes` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `post_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_users_has_posts_posts1_idx` (`post_id` ASC),
  INDEX `fk_users_has_posts_users1_idx` (`user_id` ASC),
  CONSTRAINT `fk_users_has_posts_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `socialnetwork`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_has_posts_posts1`
    FOREIGN KEY (`post_id`)
    REFERENCES `socialnetwork`.`posts` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
